Terminals unused in grammar

   TOKEN_ERROR


Grammar

    0 $accept: program $end

    1 program: item program
    2        | /* empty */

    3 item: global_type_dec ';'
    4     | fun_def

    5 global_type_dec: type global_dec

    6 global_dec: TK_IDENTIFIER value_init
    7           | '$' TK_IDENTIFIER scalar_init

    8 value_init: scalar_init
    9           | '[' LIT_INTEGER ']' array_init

   10 scalar_init: ':' literal

   11 array_init: ':' literal_list
   12           | /* empty */

   13 local_type_dec: type local_dec

   14 local_dec: TK_IDENTIFIER scalar_init
   15          | '$' TK_IDENTIFIER scalar_init

   16 type: KW_WORD
   17     | KW_BOOL
   18     | KW_BYTE

   19 literal: LIT_INTEGER LIT_FALSE LIT_TRUE LIT_CHAR

   20 literal_list: literal literal_list
   21             | /* empty */

   22 fun_def: header local_type_decs block

   23 local_type_decs: local_type_decs local_type_dec ';'
   24                | /* empty */

   25 header: type TK_IDENTIFIER '(' type_parameter_list ')'

   26 parameter: TK_IDENTIFIER
   27          | TK_IDENTIFIER '[' expr ']'
   28          | literal

   29 type_parameter_list: type TK_IDENTIFIER type_parameter_list_tail
   30                    | /* empty */

   31 type_parameter_list_tail: ',' type TK_IDENTIFIER type_parameter_list_tail
   32                         | /* empty */

   33 parameter_list: parameter parameter_list_tail
   34               | /* empty */

   35 parameter_list_tail: ',' parameter parameter_list_tail
   36                    | /* empty */

   37 block: '{' command_list '}'

   38 command_list: command ';' command_list
   39             | /* empty */

   40 command: atr
   41        | flow_control
   42        | input
   43        | output
   44        | return
   45        | block

   46 atr: TK_IDENTIFIER ass

   47 ass: '=' expr
   48    | '[' expr ']' '=' expr

   49 flow_control: if_then
   50             | if_then_else
   51             | KW_LOOP '(' expr ')' command

   52 if_then: KW_IF '(' expr ')' KW_THEN command

   53 if_then_else: KW_IF '(' expr ')' KW_THEN command KW_ELSE command

   54 input: KW_INPUT TK_IDENTIFIER

   55 output: KW_OUTPUT element_list

   56 element: LIT_STRING
   57        | expr

   58 element_list: element element_list_tail

   59 element_list_tail: ',' element_list
   60                  | /* empty */

   61 return: KW_RETURN expr

   62 expr: TK_IDENTIFIER access
   63     | TK_IDENTIFIER '(' parameter_list ')'
   64     | literal
   65     | '(' expr ')'
   66     | expr '+' expr
   67     | expr '-' expr
   68     | expr '*' expr
   69     | expr '/' expr
   70     | expr '<' expr
   71     | expr '>' expr
   72     | expr OPERATOR_LE expr
   73     | expr OPERATOR_GE expr
   74     | expr OPERATOR_EQ expr
   75     | expr OPERATOR_NE expr
   76     | expr OPERATOR_AND expr
   77     | expr OPERATOR_OR expr
   78     | '&' expr
   79     | '*' expr

   80 access: '[' expr ']'
   81       | /* empty */


Terminals, with rules where they appear

$end (0) 0
'$' (36) 7 15
'&' (38) 78
'(' (40) 25 51 52 53 63 65
')' (41) 25 51 52 53 63 65
'*' (42) 68 79
'+' (43) 66
',' (44) 31 35 59
'-' (45) 67
'/' (47) 69
':' (58) 10 11
';' (59) 3 23 38
'<' (60) 70
'=' (61) 47 48
'>' (62) 71
'[' (91) 9 27 48 80
']' (93) 9 27 48 80
'{' (123) 37
'}' (125) 37
error (256)
KW_WORD (258) 16
KW_BOOL (259) 17
KW_BYTE (260) 18
KW_IF (261) 52 53
KW_THEN (262) 52 53
KW_ELSE (263) 53
KW_LOOP (264) 51
KW_INPUT (265) 54
KW_RETURN (266) 61
KW_OUTPUT (267) 55
OPERATOR_LE (268) 72
OPERATOR_GE (269) 73
OPERATOR_EQ (270) 74
OPERATOR_NE (271) 75
OPERATOR_AND (272) 76
OPERATOR_OR (273) 77
TK_IDENTIFIER (274) 6 7 14 15 25 26 27 29 31 46 54 62 63
LIT_INTEGER (275) 9 19
LIT_FALSE (276) 19
LIT_TRUE (277) 19
LIT_CHAR (278) 19
LIT_STRING (279) 56
TOKEN_ERROR (280)
IFX (281)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1 2, on right: 0 1
item (47)
    on left: 3 4, on right: 1
global_type_dec (48)
    on left: 5, on right: 3
global_dec (49)
    on left: 6 7, on right: 5
value_init (50)
    on left: 8 9, on right: 6
scalar_init (51)
    on left: 10, on right: 7 8 14 15
array_init (52)
    on left: 11 12, on right: 9
local_type_dec (53)
    on left: 13, on right: 23
local_dec (54)
    on left: 14 15, on right: 13
type (55)
    on left: 16 17 18, on right: 5 13 25 29 31
literal (56)
    on left: 19, on right: 10 20 28 64
literal_list (57)
    on left: 20 21, on right: 11 20
fun_def (58)
    on left: 22, on right: 4
local_type_decs (59)
    on left: 23 24, on right: 22 23
header (60)
    on left: 25, on right: 22
parameter (61)
    on left: 26 27 28, on right: 33 35
type_parameter_list (62)
    on left: 29 30, on right: 25
type_parameter_list_tail (63)
    on left: 31 32, on right: 29 31
parameter_list (64)
    on left: 33 34, on right: 63
parameter_list_tail (65)
    on left: 35 36, on right: 33 35
block (66)
    on left: 37, on right: 22 45
command_list (67)
    on left: 38 39, on right: 37 38
command (68)
    on left: 40 41 42 43 44 45, on right: 38 51 52 53
atr (69)
    on left: 46, on right: 40
ass (70)
    on left: 47 48, on right: 46
flow_control (71)
    on left: 49 50 51, on right: 41
if_then (72)
    on left: 52, on right: 49
if_then_else (73)
    on left: 53, on right: 50
input (74)
    on left: 54, on right: 42
output (75)
    on left: 55, on right: 43
element (76)
    on left: 56 57, on right: 58
element_list (77)
    on left: 58, on right: 55 59
element_list_tail (78)
    on left: 59 60, on right: 58
return (79)
    on left: 61, on right: 44
expr (80)
    on left: 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79,
    on right: 27 47 48 51 52 53 57 61 65 66 67 68 69 70 71 72 73 74
    75 76 77 78 79 80
access (81)
    on left: 80 81, on right: 62


state 0

    0 $accept: . program $end

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    program          go to state 4
    item             go to state 5
    global_type_dec  go to state 6
    type             go to state 7
    fun_def          go to state 8
    header           go to state 9


state 1

   16 type: KW_WORD .

    $default  reduce using rule 16 (type)


state 2

   17 type: KW_BOOL .

    $default  reduce using rule 17 (type)


state 3

   18 type: KW_BYTE .

    $default  reduce using rule 18 (type)


state 4

    0 $accept: program . $end

    $end  shift, and go to state 10


state 5

    1 program: item . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    program          go to state 11
    item             go to state 5
    global_type_dec  go to state 6
    type             go to state 7
    fun_def          go to state 8
    header           go to state 9


state 6

    3 item: global_type_dec . ';'

    ';'  shift, and go to state 12


state 7

    5 global_type_dec: type . global_dec
   25 header: type . TK_IDENTIFIER '(' type_parameter_list ')'

    TK_IDENTIFIER  shift, and go to state 13
    '$'            shift, and go to state 14

    global_dec  go to state 15


state 8

    4 item: fun_def .

    $default  reduce using rule 4 (item)


state 9

   22 fun_def: header . local_type_decs block

    $default  reduce using rule 24 (local_type_decs)

    local_type_decs  go to state 16


state 10

    0 $accept: program $end .

    $default  accept


state 11

    1 program: item program .

    $default  reduce using rule 1 (program)


state 12

    3 item: global_type_dec ';' .

    $default  reduce using rule 3 (item)


state 13

    6 global_dec: TK_IDENTIFIER . value_init
   25 header: type TK_IDENTIFIER . '(' type_parameter_list ')'

    '['  shift, and go to state 17
    ':'  shift, and go to state 18
    '('  shift, and go to state 19

    value_init   go to state 20
    scalar_init  go to state 21


state 14

    7 global_dec: '$' . TK_IDENTIFIER scalar_init

    TK_IDENTIFIER  shift, and go to state 22


state 15

    5 global_type_dec: type global_dec .

    $default  reduce using rule 5 (global_type_dec)


state 16

   22 fun_def: header local_type_decs . block
   23 local_type_decs: local_type_decs . local_type_dec ';'

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3
    '{'      shift, and go to state 23

    local_type_dec  go to state 24
    type            go to state 25
    block           go to state 26


state 17

    9 value_init: '[' . LIT_INTEGER ']' array_init

    LIT_INTEGER  shift, and go to state 27


state 18

   10 scalar_init: ':' . literal

    LIT_INTEGER  shift, and go to state 28

    literal  go to state 29


state 19

   25 header: type TK_IDENTIFIER '(' . type_parameter_list ')'

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 30 (type_parameter_list)

    type                 go to state 30
    type_parameter_list  go to state 31


state 20

    6 global_dec: TK_IDENTIFIER value_init .

    $default  reduce using rule 6 (global_dec)


state 21

    8 value_init: scalar_init .

    $default  reduce using rule 8 (value_init)


state 22

    7 global_dec: '$' TK_IDENTIFIER . scalar_init

    ':'  shift, and go to state 18

    scalar_init  go to state 32


state 23

   37 block: '{' . command_list '}'

    KW_IF          shift, and go to state 33
    KW_LOOP        shift, and go to state 34
    KW_INPUT       shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_OUTPUT      shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '{'            shift, and go to state 23

    $default  reduce using rule 39 (command_list)

    block         go to state 39
    command_list  go to state 40
    command       go to state 41
    atr           go to state 42
    flow_control  go to state 43
    if_then       go to state 44
    if_then_else  go to state 45
    input         go to state 46
    output        go to state 47
    return        go to state 48


state 24

   23 local_type_decs: local_type_decs local_type_dec . ';'

    ';'  shift, and go to state 49


state 25

   13 local_type_dec: type . local_dec

    TK_IDENTIFIER  shift, and go to state 50
    '$'            shift, and go to state 51

    local_dec  go to state 52


state 26

   22 fun_def: header local_type_decs block .

    $default  reduce using rule 22 (fun_def)


state 27

    9 value_init: '[' LIT_INTEGER . ']' array_init

    ']'  shift, and go to state 53


state 28

   19 literal: LIT_INTEGER . LIT_FALSE LIT_TRUE LIT_CHAR

    LIT_FALSE  shift, and go to state 54


state 29

   10 scalar_init: ':' literal .

    $default  reduce using rule 10 (scalar_init)


state 30

   29 type_parameter_list: type . TK_IDENTIFIER type_parameter_list_tail

    TK_IDENTIFIER  shift, and go to state 55


state 31

   25 header: type TK_IDENTIFIER '(' type_parameter_list . ')'

    ')'  shift, and go to state 56


state 32

    7 global_dec: '$' TK_IDENTIFIER scalar_init .

    $default  reduce using rule 7 (global_dec)


state 33

   52 if_then: KW_IF . '(' expr ')' KW_THEN command
   53 if_then_else: KW_IF . '(' expr ')' KW_THEN command KW_ELSE command

    '('  shift, and go to state 57


state 34

   51 flow_control: KW_LOOP . '(' expr ')' command

    '('  shift, and go to state 58


state 35

   54 input: KW_INPUT . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 59


state 36

   61 return: KW_RETURN . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 65


state 37

   55 output: KW_OUTPUT . element_list

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    LIT_STRING     shift, and go to state 66
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal       go to state 64
    element       go to state 67
    element_list  go to state 68
    expr          go to state 69


state 38

   46 atr: TK_IDENTIFIER . ass

    '['  shift, and go to state 70
    '='  shift, and go to state 71

    ass  go to state 72


state 39

   45 command: block .

    $default  reduce using rule 45 (command)


state 40

   37 block: '{' command_list . '}'

    '}'  shift, and go to state 73


state 41

   38 command_list: command . ';' command_list

    ';'  shift, and go to state 74


state 42

   40 command: atr .

    $default  reduce using rule 40 (command)


state 43

   41 command: flow_control .

    $default  reduce using rule 41 (command)


state 44

   49 flow_control: if_then .

    $default  reduce using rule 49 (flow_control)


state 45

   50 flow_control: if_then_else .

    $default  reduce using rule 50 (flow_control)


state 46

   42 command: input .

    $default  reduce using rule 42 (command)


state 47

   43 command: output .

    $default  reduce using rule 43 (command)


state 48

   44 command: return .

    $default  reduce using rule 44 (command)


state 49

   23 local_type_decs: local_type_decs local_type_dec ';' .

    $default  reduce using rule 23 (local_type_decs)


state 50

   14 local_dec: TK_IDENTIFIER . scalar_init

    ':'  shift, and go to state 18

    scalar_init  go to state 75


state 51

   15 local_dec: '$' . TK_IDENTIFIER scalar_init

    TK_IDENTIFIER  shift, and go to state 76


state 52

   13 local_type_dec: type local_dec .

    $default  reduce using rule 13 (local_type_dec)


state 53

    9 value_init: '[' LIT_INTEGER ']' . array_init

    ':'  shift, and go to state 77

    $default  reduce using rule 12 (array_init)

    array_init  go to state 78


state 54

   19 literal: LIT_INTEGER LIT_FALSE . LIT_TRUE LIT_CHAR

    LIT_TRUE  shift, and go to state 79


state 55

   29 type_parameter_list: type TK_IDENTIFIER . type_parameter_list_tail

    ','  shift, and go to state 80

    $default  reduce using rule 32 (type_parameter_list_tail)

    type_parameter_list_tail  go to state 81


state 56

   25 header: type TK_IDENTIFIER '(' type_parameter_list ')' .

    $default  reduce using rule 25 (header)


state 57

   52 if_then: KW_IF '(' . expr ')' KW_THEN command
   53 if_then_else: KW_IF '(' . expr ')' KW_THEN command KW_ELSE command

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 82


state 58

   51 flow_control: KW_LOOP '(' . expr ')' command

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 83


state 59

   54 input: KW_INPUT TK_IDENTIFIER .

    $default  reduce using rule 54 (input)


state 60

   62 expr: TK_IDENTIFIER . access
   63     | TK_IDENTIFIER . '(' parameter_list ')'

    '['  shift, and go to state 84
    '('  shift, and go to state 85

    $default  reduce using rule 81 (access)

    access  go to state 86


state 61

   79 expr: '*' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 87


state 62

   65 expr: '(' . expr ')'

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 88


state 63

   78 expr: '&' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 89


state 64

   64 expr: literal .

    $default  reduce using rule 64 (expr)


state 65

   61 return: KW_RETURN expr .
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101

    $default  reduce using rule 61 (return)


state 66

   56 element: LIT_STRING .

    $default  reduce using rule 56 (element)


state 67

   58 element_list: element . element_list_tail

    ','  shift, and go to state 102

    $default  reduce using rule 60 (element_list_tail)

    element_list_tail  go to state 103


state 68

   55 output: KW_OUTPUT element_list .

    $default  reduce using rule 55 (output)


state 69

   57 element: expr .
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101

    $default  reduce using rule 57 (element)


state 70

   48 ass: '[' . expr ']' '=' expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 104


state 71

   47 ass: '=' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 105


state 72

   46 atr: TK_IDENTIFIER ass .

    $default  reduce using rule 46 (atr)


state 73

   37 block: '{' command_list '}' .

    $default  reduce using rule 37 (block)


state 74

   38 command_list: command ';' . command_list

    KW_IF          shift, and go to state 33
    KW_LOOP        shift, and go to state 34
    KW_INPUT       shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_OUTPUT      shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '{'            shift, and go to state 23

    $default  reduce using rule 39 (command_list)

    block         go to state 39
    command_list  go to state 106
    command       go to state 41
    atr           go to state 42
    flow_control  go to state 43
    if_then       go to state 44
    if_then_else  go to state 45
    input         go to state 46
    output        go to state 47
    return        go to state 48


state 75

   14 local_dec: TK_IDENTIFIER scalar_init .

    $default  reduce using rule 14 (local_dec)


state 76

   15 local_dec: '$' TK_IDENTIFIER . scalar_init

    ':'  shift, and go to state 18

    scalar_init  go to state 107


state 77

   11 array_init: ':' . literal_list

    LIT_INTEGER  shift, and go to state 28

    $default  reduce using rule 21 (literal_list)

    literal       go to state 108
    literal_list  go to state 109


state 78

    9 value_init: '[' LIT_INTEGER ']' array_init .

    $default  reduce using rule 9 (value_init)


state 79

   19 literal: LIT_INTEGER LIT_FALSE LIT_TRUE . LIT_CHAR

    LIT_CHAR  shift, and go to state 110


state 80

   31 type_parameter_list_tail: ',' . type TK_IDENTIFIER type_parameter_list_tail

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    type  go to state 111


state 81

   29 type_parameter_list: type TK_IDENTIFIER type_parameter_list_tail .

    $default  reduce using rule 29 (type_parameter_list)


state 82

   52 if_then: KW_IF '(' expr . ')' KW_THEN command
   53 if_then_else: KW_IF '(' expr . ')' KW_THEN command KW_ELSE command
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101
    ')'           shift, and go to state 112


state 83

   51 flow_control: KW_LOOP '(' expr . ')' command
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101
    ')'           shift, and go to state 113


state 84

   80 access: '[' . expr ']'

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 114


state 85

   63 expr: TK_IDENTIFIER '(' . parameter_list ')'

    TK_IDENTIFIER  shift, and go to state 115
    LIT_INTEGER    shift, and go to state 28

    $default  reduce using rule 34 (parameter_list)

    literal         go to state 116
    parameter       go to state 117
    parameter_list  go to state 118


state 86

   62 expr: TK_IDENTIFIER access .

    $default  reduce using rule 62 (expr)


state 87

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr
   79     | '*' expr .

    $default  reduce using rule 79 (expr)


state 88

   65 expr: '(' expr . ')'
   66     | expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101
    ')'           shift, and go to state 119


state 89

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr
   78     | '&' expr .

    $default  reduce using rule 78 (expr)


state 90

   72 expr: expr OPERATOR_LE . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 120


state 91

   73 expr: expr OPERATOR_GE . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 121


state 92

   74 expr: expr OPERATOR_EQ . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 122


state 93

   75 expr: expr OPERATOR_NE . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 123


state 94

   76 expr: expr OPERATOR_AND . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 124


state 95

   77 expr: expr OPERATOR_OR . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 125


state 96

   70 expr: expr '<' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 126


state 97

   71 expr: expr '>' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 127


state 98

   66 expr: expr '+' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 128


state 99

   67 expr: expr '-' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 129


state 100

   68 expr: expr '*' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 130


state 101

   69 expr: expr '/' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 131


state 102

   59 element_list_tail: ',' . element_list

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    LIT_STRING     shift, and go to state 66
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal       go to state 64
    element       go to state 67
    element_list  go to state 132
    expr          go to state 69


state 103

   58 element_list: element element_list_tail .

    $default  reduce using rule 58 (element_list)


state 104

   48 ass: '[' expr . ']' '=' expr
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101
    ']'           shift, and go to state 133


state 105

   47 ass: '=' expr .
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101

    $default  reduce using rule 47 (ass)


state 106

   38 command_list: command ';' command_list .

    $default  reduce using rule 38 (command_list)


state 107

   15 local_dec: '$' TK_IDENTIFIER scalar_init .

    $default  reduce using rule 15 (local_dec)


state 108

   20 literal_list: literal . literal_list

    LIT_INTEGER  shift, and go to state 28

    $default  reduce using rule 21 (literal_list)

    literal       go to state 108
    literal_list  go to state 134


state 109

   11 array_init: ':' literal_list .

    $default  reduce using rule 11 (array_init)


state 110

   19 literal: LIT_INTEGER LIT_FALSE LIT_TRUE LIT_CHAR .

    $default  reduce using rule 19 (literal)


state 111

   31 type_parameter_list_tail: ',' type . TK_IDENTIFIER type_parameter_list_tail

    TK_IDENTIFIER  shift, and go to state 135


state 112

   52 if_then: KW_IF '(' expr ')' . KW_THEN command
   53 if_then_else: KW_IF '(' expr ')' . KW_THEN command KW_ELSE command

    KW_THEN  shift, and go to state 136


state 113

   51 flow_control: KW_LOOP '(' expr ')' . command

    KW_IF          shift, and go to state 33
    KW_LOOP        shift, and go to state 34
    KW_INPUT       shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_OUTPUT      shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '{'            shift, and go to state 23

    block         go to state 39
    command       go to state 137
    atr           go to state 42
    flow_control  go to state 43
    if_then       go to state 44
    if_then_else  go to state 45
    input         go to state 46
    output        go to state 47
    return        go to state 48


state 114

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr
   80 access: '[' expr . ']'

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101
    ']'           shift, and go to state 138


state 115

   26 parameter: TK_IDENTIFIER .
   27          | TK_IDENTIFIER . '[' expr ']'

    '['  shift, and go to state 139

    $default  reduce using rule 26 (parameter)


state 116

   28 parameter: literal .

    $default  reduce using rule 28 (parameter)


state 117

   33 parameter_list: parameter . parameter_list_tail

    ','  shift, and go to state 140

    $default  reduce using rule 36 (parameter_list_tail)

    parameter_list_tail  go to state 141


state 118

   63 expr: TK_IDENTIFIER '(' parameter_list . ')'

    ')'  shift, and go to state 142


state 119

   65 expr: '(' expr ')' .

    $default  reduce using rule 65 (expr)


state 120

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   72     | expr OPERATOR_LE expr .
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99
    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 72 (expr)


state 121

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   73     | expr OPERATOR_GE expr .
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99
    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 73 (expr)


state 122

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   74     | expr OPERATOR_EQ expr .
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99
    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 74 (expr)


state 123

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   75     | expr OPERATOR_NE expr .
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99
    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 75 (expr)


state 124

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   76     | expr OPERATOR_AND expr .
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE  shift, and go to state 90
    OPERATOR_GE  shift, and go to state 91
    OPERATOR_EQ  shift, and go to state 92
    OPERATOR_NE  shift, and go to state 93
    '<'          shift, and go to state 96
    '>'          shift, and go to state 97
    '+'          shift, and go to state 98
    '-'          shift, and go to state 99
    '*'          shift, and go to state 100
    '/'          shift, and go to state 101

    $default  reduce using rule 76 (expr)


state 125

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr
   77     | expr OPERATOR_OR expr .

    OPERATOR_LE  shift, and go to state 90
    OPERATOR_GE  shift, and go to state 91
    OPERATOR_EQ  shift, and go to state 92
    OPERATOR_NE  shift, and go to state 93
    '<'          shift, and go to state 96
    '>'          shift, and go to state 97
    '+'          shift, and go to state 98
    '-'          shift, and go to state 99
    '*'          shift, and go to state 100
    '/'          shift, and go to state 101

    $default  reduce using rule 77 (expr)


state 126

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   70     | expr '<' expr .
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99
    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 70 (expr)


state 127

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   71     | expr '>' expr .
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99
    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 71 (expr)


state 128

   66 expr: expr . '+' expr
   66     | expr '+' expr .
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 66 (expr)


state 129

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   67     | expr '-' expr .
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 67 (expr)


state 130

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   68     | expr '*' expr .
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    $default  reduce using rule 68 (expr)


state 131

   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   69     | expr '/' expr .
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    $default  reduce using rule 69 (expr)


state 132

   59 element_list_tail: ',' element_list .

    $default  reduce using rule 59 (element_list_tail)


state 133

   48 ass: '[' expr ']' . '=' expr

    '='  shift, and go to state 143


state 134

   20 literal_list: literal literal_list .

    $default  reduce using rule 20 (literal_list)


state 135

   31 type_parameter_list_tail: ',' type TK_IDENTIFIER . type_parameter_list_tail

    ','  shift, and go to state 80

    $default  reduce using rule 32 (type_parameter_list_tail)

    type_parameter_list_tail  go to state 144


state 136

   52 if_then: KW_IF '(' expr ')' KW_THEN . command
   53 if_then_else: KW_IF '(' expr ')' KW_THEN . command KW_ELSE command

    KW_IF          shift, and go to state 33
    KW_LOOP        shift, and go to state 34
    KW_INPUT       shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_OUTPUT      shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '{'            shift, and go to state 23

    block         go to state 39
    command       go to state 145
    atr           go to state 42
    flow_control  go to state 43
    if_then       go to state 44
    if_then_else  go to state 45
    input         go to state 46
    output        go to state 47
    return        go to state 48


state 137

   51 flow_control: KW_LOOP '(' expr ')' command .

    $default  reduce using rule 51 (flow_control)


state 138

   80 access: '[' expr ']' .

    $default  reduce using rule 80 (access)


state 139

   27 parameter: TK_IDENTIFIER '[' . expr ']'

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 146


state 140

   35 parameter_list_tail: ',' . parameter parameter_list_tail

    TK_IDENTIFIER  shift, and go to state 115
    LIT_INTEGER    shift, and go to state 28

    literal    go to state 116
    parameter  go to state 147


state 141

   33 parameter_list: parameter parameter_list_tail .

    $default  reduce using rule 33 (parameter_list)


state 142

   63 expr: TK_IDENTIFIER '(' parameter_list ')' .

    $default  reduce using rule 63 (expr)


state 143

   48 ass: '[' expr ']' '=' . expr

    TK_IDENTIFIER  shift, and go to state 60
    LIT_INTEGER    shift, and go to state 28
    '*'            shift, and go to state 61
    '('            shift, and go to state 62
    '&'            shift, and go to state 63

    literal  go to state 64
    expr     go to state 148


state 144

   31 type_parameter_list_tail: ',' type TK_IDENTIFIER type_parameter_list_tail .

    $default  reduce using rule 31 (type_parameter_list_tail)


state 145

   52 if_then: KW_IF '(' expr ')' KW_THEN command .
   53 if_then_else: KW_IF '(' expr ')' KW_THEN command . KW_ELSE command

    KW_ELSE  shift, and go to state 149

    $default  reduce using rule 52 (if_then)


state 146

   27 parameter: TK_IDENTIFIER '[' expr . ']'
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101
    ']'           shift, and go to state 150


state 147

   35 parameter_list_tail: ',' parameter . parameter_list_tail

    ','  shift, and go to state 140

    $default  reduce using rule 36 (parameter_list_tail)

    parameter_list_tail  go to state 151


state 148

   48 ass: '[' expr ']' '=' expr .
   66 expr: expr . '+' expr
   67     | expr . '-' expr
   68     | expr . '*' expr
   69     | expr . '/' expr
   70     | expr . '<' expr
   71     | expr . '>' expr
   72     | expr . OPERATOR_LE expr
   73     | expr . OPERATOR_GE expr
   74     | expr . OPERATOR_EQ expr
   75     | expr . OPERATOR_NE expr
   76     | expr . OPERATOR_AND expr
   77     | expr . OPERATOR_OR expr

    OPERATOR_LE   shift, and go to state 90
    OPERATOR_GE   shift, and go to state 91
    OPERATOR_EQ   shift, and go to state 92
    OPERATOR_NE   shift, and go to state 93
    OPERATOR_AND  shift, and go to state 94
    OPERATOR_OR   shift, and go to state 95
    '<'           shift, and go to state 96
    '>'           shift, and go to state 97
    '+'           shift, and go to state 98
    '-'           shift, and go to state 99
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101

    $default  reduce using rule 48 (ass)


state 149

   53 if_then_else: KW_IF '(' expr ')' KW_THEN command KW_ELSE . command

    KW_IF          shift, and go to state 33
    KW_LOOP        shift, and go to state 34
    KW_INPUT       shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_OUTPUT      shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '{'            shift, and go to state 23

    block         go to state 39
    command       go to state 152
    atr           go to state 42
    flow_control  go to state 43
    if_then       go to state 44
    if_then_else  go to state 45
    input         go to state 46
    output        go to state 47
    return        go to state 48


state 150

   27 parameter: TK_IDENTIFIER '[' expr ']' .

    $default  reduce using rule 27 (parameter)


state 151

   35 parameter_list_tail: ',' parameter parameter_list_tail .

    $default  reduce using rule 35 (parameter_list_tail)


state 152

   53 if_then_else: KW_IF '(' expr ')' KW_THEN command KW_ELSE command .

    $default  reduce using rule 53 (if_then_else)
