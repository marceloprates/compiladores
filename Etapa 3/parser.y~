%{
	// Lucas Martinelli Tabajara, Marcelo de Oliveira Rosa Prates

	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include "hash.h"
%}

%start program

%union{ linkedList_t* symbol; }

%token 			KW_WORD
%token 			KW_BOOL
%token 			KW_BYTE
%token 			KW_IF
%token 			KW_THEN
%token 			KW_ELSE
%token 			KW_LOOP
%token 			KW_INPUT
%token 			KW_RETURN
%token 			KW_OUTPUT
%token 			OPERATOR_LE
%token 			OPERATOR_GE
%token 			OPERATOR_EQ
%token 			OPERATOR_NE
%token 			OPERATOR_AND
%token 			OPERATOR_OR
%token 			TK_IDENTIFIER
%token <symbol>	LIT_INTEGER
%token <symbol>	LIT_FALSE
%token <symbol>	LIT_TRUE
%token <symbol>	LIT_CHAR
%token <symbol>	LIT_STRING
%token 			TOKEN_ERROR

%left OPERATOR_AND OPERATOR_OR
%left '<' '>' OPERATOR_LE OPERATOR_GE OPERATOR_EQ OPERATOR_NE
%left '+' '-'
%left '*' '/'

%nonassoc IFX
%nonassoc KW_ELSE

%%
	program:
		item program |
		/* empty */
		;

	item:
		global_type_dec ';' |
		fun_def
		;

	global_type_dec:
		type global_dec
		;

	global_dec:
		TK_IDENTIFIER value_init |
		'$' TK_IDENTIFIER scalar_init
		;

	value_init:
		scalar_init |
		'[' LIT_INTEGER ']' array_init
		;

	scalar_init:
		':' literal
		;

	array_init:
		':' literal_list	|
		/* empty */
		;

	local_type_dec:
		type local_dec
		;

	local_dec:
		TK_IDENTIFIER scalar_init |
		'$' TK_IDENTIFIER scalar_init
		;

	type:
		KW_WORD	|
		KW_BOOL	|
		KW_BYTE
		;

	literal:
		LIT_INTEGER	{ $$ = CreateAST0(LITERAL, $1); }	|
		LIT_FALSE	{ $$ = CreateAST0(LITERAL, $1); }	|
		LIT_TRUE	{ $$ = CreateAST0(LITERAL, $1); }	|
		LIT_CHAR	{ $$ = CreateAST0(LITERAL, $1); }
		;

	literal_list:
		literal literal_list |
		/* empty */
		;

	fun_def:
		header local_type_decs block	{ $$ = CreateAST2(FUNCTIONDEFINITION, NULL, $1, $2, $3); }
		;

	local_type_decs:
		local_type_decs local_type_dec ';' |
		/* empty */
		;

	header:
		type TK_IDENTIFIER '(' type_parameter_list ')'	{ $$ = CreateAST3(FUNCTIONHEADER, NULL, $1, $2, $3); }
		;

	parameter:
		TK_IDENTIFIER 			|
		TK_IDENTIFIER '[' expr ']' 	|
		literal
		;	

	type_parameter_list:
		type TK_IDENTIFIER type_parameter_list_tail |
		/* empty */
		;

	type_parameter_list_tail:
		',' type TK_IDENTIFIER type_parameter_list_tail |
		/* empty */
		;

	parameter_list:
		parameter parameter_list_tail |
		/* empty */
		;

	parameter_list_tail:
		',' parameter parameter_list_tail |
		/* empty */
		;

	block:
		'{' command_list '}'	{ $$ = CreateAST1(BLOCK, NULL, $2); }
		;

	command_list:
		command ';' command_list |
		/* empty */
		;

	command:
		atr 			|
		flow_control 	|
		input 			|
		output 			|
		return 			|
		block
		;

	atr:
		TK_IDENTIFIER ass
		;

	ass:
		'=' expr |
		'[' expr ']' '=' expr
		;

	flow_control:
		KW_IF '(' expr ')' KW_THEN command %prec IFX		{ $$ = CreateAST(IFTHEN, NULL, $3, $6, NULL, NULL); } |
		KW_IF '(' expr ')' KW_THEN command KW_ELSE command	{ $$ = CreateAST(IFTHENELSE, NULL, $3, $6, $8, NULL); } |
		KW_LOOP '(' expr ')' command						{ $$ = CreateAST(LOOP, NULL, $3, $5, NULL, NULL); }
		;
		
	input:
		KW_INPUT TK_IDENTIFIER	{ $$ = CreateAST(INPUT, NULL, $2, NULL, NULL, NULL); }
		;

	output:
		KW_OUTPUT element_list
		;

	element:
		LIT_STRING	{ $$ = CreateAST(LITERAL, $1, NULL, NULL, NULL, NULL); }		|
		expr
		;

	element_list:
		element element_list_tail
		;

	element_list_tail:
		',' element_list |
		/* empty */
		;

	return:
		KW_RETURN expr	{ $$ = CreateAST(RETURN, NULL, $2, NULL, NULL, NULL); }
		;

	expr:
		TK_IDENTIFIER							{ $$ = CreateAST(IDENTIFIER, $1, NULL, NULL, NULL, NULL); }	|
		TK_IDENTIFIER '[' expr ']'				{ $$ = CreateAST(ARRAYACCESS, NULL, _, $3, NULL, NULL); }			  		 |
		TK_IDENTIFIER '(' parameter_list ')'	{ $$ = CreateAST(FUNCTIONCALL, NULL, _, $3, NULL, NULL); }	 |
		literal 					  		 |
		'(' expr ')'							{ $$ = $2; }				  		 |
		expr '+' expr				 	{ $$ = CreateAST(ADDITION, NULL, $1, $3, NULL, NULL); }						 |
		expr '-' expr				 	{ $$ = CreateAST(SUBTRACTION, NULL, $1, $3, NULL, NULL); }						 |
		expr '*' expr				 	{ $$ = CreateAST(MULTIPLICATION, NULL, $1, $3, NULL, NULL); }						 |
		expr '/' expr				 	{ $$ = CreateAST(DIVISION, NULL, $1, $3, NULL, NULL); }						 |
		expr '<' expr				 	{ $$ = CreateAST(LESSERTHAN, NULL, $1, $3, NULL, NULL); } 						 |
		expr '>' expr				 	{ $$ = CreateAST(GREATERTHAN, NULL, $1, $3, NULL, NULL); }						 |
		expr OPERATOR_LE expr				 	{ $$ = CreateAST(LESSEREQUAL, NULL, $1, $3, NULL, NULL); }				 |
		expr OPERATOR_GE expr				 	{ $$ = CreateAST(GREATEREQUAL, NULL, $1, $3, NULL, NULL); }				 |
		expr OPERATOR_EQ expr				 	{ $$ = CreateAST(EQUAL, NULL, $1, $3, NULL, NULL); }				 |
		expr OPERATOR_NE expr				 	{ $$ = CreateAST(NOTEQUAL, NULL, $1, $3, NULL, NULL); }				 |
		expr OPERATOR_AND expr				 	{ $$ = CreateAST(AND, NULL, $1, $3, NULL, NULL); }				 |
		expr OPERATOR_OR expr				 	{ $$ = CreateAST(OR, NULL, $1, $3, NULL, NULL); }	|
		'&' expr %prec '*'			 		 	{ $$ = CreateAST(REF, NULL, $2, NULL, NULL, NULL); }	|
		'*' expr %prec '*'						{ $$ = CreateAST(DEREF, NULL, $2, NULL, NULL, NULL); }
		;

%%

yyerror(s)
char *s;
{
  fprintf(stderr, "%s in line %d\n",s,getLineNumber());

  exit(3);
}
